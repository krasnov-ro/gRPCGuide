syntax = "proto3";

option csharp_namespace = "gRPCGuideContract.Contract";

service RouteGuide{
/*
Простой RPC, где клиент отправляет запрос на сервер, используя клиентский объект и ждет ответа,
чтобы вернуться, так же, как обычный вызов функции
*/
	rpc GetPersonLifeStatus(GetPersonLifeStatusRequest) returns (GetPersonLifeStatusResponse) {}

/*
На стороне сервера потокового RPC, где клиент отправляет запрос на сервер и получает поток 
прочитать последовательность сообщений обратно. Клиент читает из возвращенного потока, пока
больше нет сообщений. Как вы можете видеть в нашем примере, вы указываете потоковый метод на 
стороне сервера, помещая stream ключевое слово перед типом ответа.
*/
	rpc SocialCapMessage(SocialCapRequest) returns (SocialCapResponse) {}

/*
Потоковый RPC на стороне клиента, когда клиент записывает последовательность сообщений и 
посылает их на сервер, снова используя указанный поток. Как только клиент закончил писать 
сообщения, он ждет, пока сервер прочитает их все и вернет свой ответ. 
*/
	rpc SendMessageList(stream GetPersonLifeStatusRequest) returns (GetPersonLifeStatusResponse) {}

/*
Двунаправленного потокового RPC, где обе стороны отправить последовательность сообщений,
используя поток чтения-записи. Два потока работают независимо, поэтому клиенты и серверы могут
читать и записывать в любом порядке: например, сервер может ждать получения всех сообщений
клиента, прежде чем писать свои ответы, или он может поочередно читать сообщение, а затем писать
сообщение, или некоторая другая комбинация чтения и записи. Порядок сообщений в каждом
потоке сохраняется. 
*/
	rpc SendMessage (stream GetPersonLifeStatusRequest) returns (stream GetPersonLifeStatusResponse) {}
}

message GetPersonLifeStatusRequest {
	string lastName = 1;
	string firstName = 2;
	string middleName = 3;
	string birthDate = 4;
	string SenderCode = 5;
}

message GetPersonLifeStatusResponse {
	string lastName = 1;
	string firstName = 2;
	string middleName = 3;
	string birthDate = 4; 
	string status = 5;

	enum Statuses {
		DEAD = 0;
		ALIVE = 1;
	}
}

message SocialCapRequest {
	string lastName = 1;
	string firstName = 2;
	string middleName = 3;
	string birthDate = 4;
}

message SocialCapResponse {
	string status = 1;

	enum Statuses {
		AVAILABLE = 0;
		ABSENT = 1;
	}
}

message Person {
  string name = 1;
  int32 id = 2;  // Unique ID number for this person.
  string email = 3;

  enum PhoneType {
    MOBILE = 0;
    HOME = 1;
    WORK = 2;
  }

  message PhoneNumber {
    string number = 1;
    PhoneType type = 2;
  }

  repeated PhoneNumber phones = 4;
}

// Our address book file is just one of these.
message AddressBook {
  repeated Person people = 1;
}